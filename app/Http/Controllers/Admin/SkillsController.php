<?php

namespace App\Http\Controllers\Admin;

use App\Repositories\SkillsRepository;
use App\Skills;
use Illuminate\Http\Request;
use App\Http\Requests\SkillsRequest;

use App\Http\Requests;
use App\Http\Controllers\Controller;

class SkillsController extends AdminController
{
    public function __construct(SkillsRepository $skills_rep) {
        parent::__construct();

        $this->skills_rep = $skills_rep;

        $this->template = env('THEME').'.admin.skills';
    }

    public function index() {
        $this->title = 'Навыки и знания';
        $skill = $this->getSkills();
        $this->content =view(env('THEME').'.admin.skills_content')
            ->with('skill', $skill)->render();

        return $this->renderOutput();
    }

    public function getSkills() {
        $skill = $this->skills_rep->get('*');
        return $skill;
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return SkillsController
     */
    public function create()
    {
        $this->title = "Добавить навык";

        $items = Skills::select('*');

        $this->content = view(env('THEME').'.admin.skills_create_content')->with('items', $items)->render();

        return $this->renderOutput();

    }

    public function edit(Skills $skill)
    {
        $skill->img =json_decode($skill->img);
        $items = Skills::pluck('*');

        $this->title = 'Редактирование материала - '. $skill->title;
        $this->content = view(env('THEME').'.admin.skills_edit_content')
            ->with(['items' => $items,'skill'=>$skill])->render();
        return $this->renderOutput();
    }

    public function store(SkillsRequest $request)
    {
        $result = $this->skills_rep->addSkill($request);
        if(is_array($result) && !empty(['error'])) {
            return  back()->with($result);
        }
        return redirect('/admin')->with($result);
    }

    public function update(SkillsRequest $request, Skills $skill)
    {
        $result = $this->skills_rep->updateSkill($request, $skill);
        if(is_array($result) && !empty($result['error'])) {
            return back()->with($result);
        }
        return redirect('/admin/skills')->with($result);
    }

    public function destroy(Skills $skill)
    {
        $result = $this->skills_rep->deleteSkill($skill);
        if(is_array($result) && !empty($result['error'])) {
            return back()->with($result);
        }
        return redirect('/admin/skills')->with($result);
    }
}
