<?php
/**
 * Created by PhpStorm.
 * User: ExploitKn
 * Date: 27.11.2017
 * Time: 20:59
 */

namespace App\Repositories;
use App\Portfolio;
use Image;

class PortfolioRepository extends Repository {

    public function __construct(Portfolio $portfolio){
        $this->model = $portfolio;
    }

    public function one($alias, $attr = array()) {
        $portfolio = parent::one($alias,$attr);
        if($portfolio && $portfolio->img) {
            $portfolio->img = json_decode($portfolio->img);
        }
        if($portfolio && $portfolio->img2) {
            $portfolio->img2 = json_decode($portfolio->img2);
        }
        if($portfolio && $portfolio->img3) {
            $portfolio->img3 = json_decode($portfolio->img3);
        }
        if($portfolio && $portfolio->img4) {
            $portfolio->img4 = json_decode($portfolio->img4);
        }
        return $portfolio;
    }

    public function addPortfolio($request) {

        $data = $request->except('_token','image','image2','image3','image4');
        if(empty($data)) {
            return array('error' => 'Нет данных');
        }

        if(empty($data['alias'])) {
            $data['alias'] = $this->transliterate($data['title']);
        }
        if($this->one($data['alias'], FALSE)) {
            $request->merge(array('alias' => $data['alias']));
            //Сохранним в сессию
            $request->flash();
            return ['error' => 'Данный псевдоним уже используется'];
        }
        // Изображение
        if($request->hasFile('image')) {
            $image = $request->file('image');
            if($image->isValid()) {
                $str = str_random(8);
                $obj = new \stdClass;
                $obj->path = $str.'.png';
                $img = Image::make($image);
                $img->save(public_path().'/'.env('THEME').'/images/project/'.$obj->path);
                $data['img'] = json_encode($obj);
            }
        }
        // Изображение 2
        if($request->hasFile('image2')) {
            $image2 = $request->file('image2');
            if($image2->isValid()) {
                $str2 = str_random(8);
                $obj2 = new \stdClass;
                $obj2->path = $str2.'.png';
                $img2 = Image::make($image2);
                $img2->save(public_path().'/'.env('THEME').'/images/project/sliders/'.$obj2->path);
                $data['img2'] = json_encode($obj2);
            }
        }
        // Изображение 3
        if($request->hasFile('image3')) {
            $image3 = $request->file('image3');
            if($image3->isValid()) {
                $str3 = str_random(8);
                $obj3 = new \stdClass;
                $obj3->path = $str3.'.png';
                $img3 = Image::make($image3);
                $img3->save(public_path().'/'.env('THEME').'/images/project/sliders/'.$obj3->path);
                $data['img3'] = json_encode($obj3);
            }
        }
        // Изображение 4
        if($request->hasFile('image4')) {
            $image4 = $request->file('image4');
            if($image4->isValid()) {
                $str4 = str_random(8);
                $obj4 = new \stdClass;
                $obj4->path = $str4.'.png';
                $img4 = Image::make($image4);
                $img4->save(public_path().'/'.env('THEME').'/images/project/sliders/'.$obj4->path);
                $data['img4'] = json_encode($obj4);
            }
        }
        if($this->model->fill($data)->save()) {
            return ['status' => 'Проект добавлен'];
        }
    }


    public function updatePortfolio($request, $portfolio) {

        $data = $request->except('_token','image','image2','image3','image4','_method');
        if(empty($data)) {
            return array('error' => 'Нет данных');
        }
        //Псевдонимы
        if(empty($data['alias'])) {
            $data['alias'] = $this->transliterate($data['title']);
        }
        $result = $this->one($data['alias'], FALSE);
        if(isset($result->id) && ($result->id != $portfolio->id)) {
            $request->merge(array('alias' => $data['alias']));
            $request->flash();
            return ['error' => 'Данный псевдоним уже используется'];
        }
        // Изображение
        if($request->hasFile('image')) {
            $image = $request->file('image');
            if($image->isValid()) {
                $str = str_random(8);
                $obj = new \stdClass;
                $obj->path = $str.'.png';
                $img = Image::make($image);
                $img->save(public_path().'/'.env('THEME').'/images/project/'.$obj->path);
                $data['img'] = json_encode($obj);
            }
        }
        // Изображение 2
        if($request->hasFile('image2')) {
            $image2 = $request->file('image2');
            if($image2->isValid()) {
                $str2 = str_random(8);
                $obj2 = new \stdClass;
                $obj2->path = $str2.'.png';
                $img2 = Image::make($image2);
                $img2->save(public_path().'/'.env('THEME').'/images/project/sliders/'.$obj2->path);
                $data['img2'] = json_encode($obj2);
            }
        }
        // Изображение 3
        if($request->hasFile('image3')) {
            $image3 = $request->file('image3');
            if($image3->isValid()) {
                $str3 = str_random(8);
                $obj3 = new \stdClass;
                $obj3->path = $str3.'.png';
                $img3 = Image::make($image3);
                $img3->save(public_path().'/'.env('THEME').'/images/project/sliders/'.$obj3->path);
                $data['img3'] = json_encode($obj3);
            }
        }
        // Изображение 4
        if($request->hasFile('image4')) {
            $image4 = $request->file('image4');
            if($image4->isValid()) {
                $str4 = str_random(8);
                $obj4 = new \stdClass;
                $obj4->path = $str4.'.png';
                $img4 = Image::make($image4);
                $img4->save(public_path().'/'.env('THEME').'/images/project/sliders/'.$obj4->path);
                $data['img4'] = json_encode($obj4);
            }
        }
        $portfolio->fill($data);
        if($portfolio->update()) {
            return ['status'=> 'Проект обновлен'];
        }
    }

    public function deletePortfolio($portfolio) {
        $portfolio->delete();
        if($portfolio->delete()) {
            return ['status' => 'Проект удален'];
        }
    }

}